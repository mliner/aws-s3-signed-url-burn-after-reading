AWSTemplateFormatVersion: 2010-09-09

Description: S3 - Signed link burn after reading mechanism

Parameters:

  BucketName:
    Description: Bucket name with objects for which we want to create signed urls
    Type: String
  ObjectKey:
    Description: Bucket objects key (path)
    Type: String
    Default: '/'
  CreateBucket:
    Description: If we want to use existing bucket or create a new one
    Type: String
    Default: no
    AllowedValues: [ yes, no ]
  BurnMethod:
    Description: S3 link invalidation by deletion of object or moving to different path
    Type: String
    Default: delete
    AllowedValues: [ delete, move]
  LogLevel:
    Description: Lambda log level
    Type: String
    AllowedValues: [ info, debug ]

Conditions:
  CreateBucket: !Equals [ !Ref CreateBucket, true ]

Resources:

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: S3DeleteMove
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub 'arn:aws:s3:::${BucketName}${ObjectKey}/*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Role: !GetAtt LambdaRole.Arn
      Handler: lambda_handler
      Runtime: python3.7
      Timeout: 25
      Code:
        ZipFile: |
          import json
          import boto3
          import logging

          bucket = os.environ['BUCKET']
          object_key = os.environ['OBJECT_KEY']
          burn_method = os.environ['BURN_METHOD']

          logger = logging.getLogger(__name__)
          logger.setLevel(logging.INFO)

          session = boto3.session.Session()
          client = session.client('s3')

          def lambda_handler(event, context):
            logger.debug(event)
            key = event['detail']['requestParameters']['key']

            print(event['detail']['eventName'])

            if event['detail']['eventName'] == "GetObject":
              logger.debug('Deleting object %s' % key)
              try:
                response = client.delete_object(
                Bucket=bucket,
                Key=key
                )
                logger.info('Object %s deleted.' % key)
              except Exception as e:
                logger.exception(e)
      Environment:
        Variables:
          BUCKET: !Ref BucketName
          OBJECT_KEY: !Ref ObjectKey
          BURN_METHOD: !Ref BurnMethod

  Bucket:
    Condition: CreateBucket
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref BucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled

  BucketPolicy:
    Condition: CreateBucket
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Statement:
          - Sid: Bucket policy
            Effect: Allow
            Principal:
              AWS:
                - !Ref LambdaRole
            Action:
              - s3:DeleteObject
              - s3:GetObject
              - s3:PutObject
            Resource:
              - !GetAtt Bucket.Arn
              - !Join [ '', [ !GetAtt Bucket.Arn, '/*'] ]

  Trail:
    Type: AWS::CloudTrail::Trail
    Properties:
      S3BucketName: !Ref Bucket
      IsLogging: true
      IsMultiRegionTrail: false
      EventSelectors:
        DataResources:
          Type: AWS::S3::Object
          Values:
            - !Sub ' arn:aws:s3:::${Bucket}${ObjectKey}'